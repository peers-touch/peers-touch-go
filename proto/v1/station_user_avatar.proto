syntax = "proto3";

package peers_touch.v1.user;

option go_package = "github.com/dirty-bro-tech/peers-touch-proto/v1/user_avatar";

// PEERS_GENERATION_CONFIG:
// target: peers-touch-station/backend/proto
// target: peers-touch-mobile/lib/model/proto
// skip: peers-touch-station/desktop/lib/model/proto
// model_only: true

import "google/protobuf/timestamp.proto";

// UserAvatar represents a user's profile avatar image
message UserAvatar {
  string id = 1;                                  // Unique identifier for the avatar
  string user_id = 2;                            // User ID this avatar belongs to
  string filename = 3;                           // Original filename
  string url = 4;                                // URL to access the avatar
  int64 size = 5;                                // File size in bytes
  string mime_type = 6;                          // MIME type of the image
  bool is_current = 7;                           // Whether this is the current avatar
  google.protobuf.Timestamp created_at = 8;      // When the avatar was uploaded
}

// Note: For the actual implementation, we're using multipart form data for the upload
// rather than binary data in the request, as it's more efficient for file uploads.
// This proto definition serves as documentation for the API contract.

// UploadAvatarRequest is the request for uploading a new avatar
// In practice, this is implemented as a multipart form upload with 'user_id' and 'avatar' fields
message UploadAvatarRequest {
  string user_id = 1;                            // User ID uploading the avatar
  // The actual implementation uses multipart/form-data for file upload
  // instead of embedding binary data in the request
}

// UploadAvatarResponse is the response after uploading an avatar
message UploadAvatarResponse {
  UserAvatar avatar = 1;                          // The newly uploaded avatar
  bool success = 2;                              // Whether the upload was successful
  string message = 3;                            // Error message if unsuccessful
}

// GetUserAvatarsRequest is the request for retrieving a user's avatars
message GetUserAvatarsRequest {
  string user_id = 1;                            // User ID to get avatars for
  int32 limit = 2;                               // Maximum number of avatars to return (default: 5)
}

// GetUserAvatarsResponse is the response containing user avatars
message GetUserAvatarsResponse {
  repeated UserAvatar avatars = 1;                // List of user avatars (most recent first)
  bool success = 2;                              // Whether the request was successful
  string message = 3;                            // Error message if unsuccessful
}